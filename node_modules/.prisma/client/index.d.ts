
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Business
 * 
 */
export type Business = $Result.DefaultSelection<Prisma.$BusinessPayload>
/**
 * Model RedirectHistory
 * 
 */
export type RedirectHistory = $Result.DefaultSelection<Prisma.$RedirectHistoryPayload>
/**
 * Model ScanEvent
 * 
 */
export type ScanEvent = $Result.DefaultSelection<Prisma.$ScanEventPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Businesses
 * const businesses = await prisma.business.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Businesses
   * const businesses = await prisma.business.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.business`: Exposes CRUD operations for the **Business** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Businesses
    * const businesses = await prisma.business.findMany()
    * ```
    */
  get business(): Prisma.BusinessDelegate<ExtArgs>;

  /**
   * `prisma.redirectHistory`: Exposes CRUD operations for the **RedirectHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RedirectHistories
    * const redirectHistories = await prisma.redirectHistory.findMany()
    * ```
    */
  get redirectHistory(): Prisma.RedirectHistoryDelegate<ExtArgs>;

  /**
   * `prisma.scanEvent`: Exposes CRUD operations for the **ScanEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScanEvents
    * const scanEvents = await prisma.scanEvent.findMany()
    * ```
    */
  get scanEvent(): Prisma.ScanEventDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Business: 'Business',
    RedirectHistory: 'RedirectHistory',
    ScanEvent: 'ScanEvent'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "business" | "redirectHistory" | "scanEvent"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Business: {
        payload: Prisma.$BusinessPayload<ExtArgs>
        fields: Prisma.BusinessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BusinessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BusinessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>
          }
          findFirst: {
            args: Prisma.BusinessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BusinessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>
          }
          findMany: {
            args: Prisma.BusinessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>[]
          }
          create: {
            args: Prisma.BusinessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>
          }
          createMany: {
            args: Prisma.BusinessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BusinessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>[]
          }
          delete: {
            args: Prisma.BusinessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>
          }
          update: {
            args: Prisma.BusinessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>
          }
          deleteMany: {
            args: Prisma.BusinessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BusinessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BusinessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessPayload>
          }
          aggregate: {
            args: Prisma.BusinessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBusiness>
          }
          groupBy: {
            args: Prisma.BusinessGroupByArgs<ExtArgs>
            result: $Utils.Optional<BusinessGroupByOutputType>[]
          }
          count: {
            args: Prisma.BusinessCountArgs<ExtArgs>
            result: $Utils.Optional<BusinessCountAggregateOutputType> | number
          }
        }
      }
      RedirectHistory: {
        payload: Prisma.$RedirectHistoryPayload<ExtArgs>
        fields: Prisma.RedirectHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RedirectHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedirectHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RedirectHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedirectHistoryPayload>
          }
          findFirst: {
            args: Prisma.RedirectHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedirectHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RedirectHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedirectHistoryPayload>
          }
          findMany: {
            args: Prisma.RedirectHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedirectHistoryPayload>[]
          }
          create: {
            args: Prisma.RedirectHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedirectHistoryPayload>
          }
          createMany: {
            args: Prisma.RedirectHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RedirectHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedirectHistoryPayload>[]
          }
          delete: {
            args: Prisma.RedirectHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedirectHistoryPayload>
          }
          update: {
            args: Prisma.RedirectHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedirectHistoryPayload>
          }
          deleteMany: {
            args: Prisma.RedirectHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RedirectHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RedirectHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RedirectHistoryPayload>
          }
          aggregate: {
            args: Prisma.RedirectHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRedirectHistory>
          }
          groupBy: {
            args: Prisma.RedirectHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<RedirectHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.RedirectHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<RedirectHistoryCountAggregateOutputType> | number
          }
        }
      }
      ScanEvent: {
        payload: Prisma.$ScanEventPayload<ExtArgs>
        fields: Prisma.ScanEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScanEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScanEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanEventPayload>
          }
          findFirst: {
            args: Prisma.ScanEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScanEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanEventPayload>
          }
          findMany: {
            args: Prisma.ScanEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanEventPayload>[]
          }
          create: {
            args: Prisma.ScanEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanEventPayload>
          }
          createMany: {
            args: Prisma.ScanEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScanEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanEventPayload>[]
          }
          delete: {
            args: Prisma.ScanEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanEventPayload>
          }
          update: {
            args: Prisma.ScanEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanEventPayload>
          }
          deleteMany: {
            args: Prisma.ScanEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScanEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ScanEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScanEventPayload>
          }
          aggregate: {
            args: Prisma.ScanEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScanEvent>
          }
          groupBy: {
            args: Prisma.ScanEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScanEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScanEventCountArgs<ExtArgs>
            result: $Utils.Optional<ScanEventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type BusinessCountOutputType
   */

  export type BusinessCountOutputType = {
    histories: number
    scanEvents: number
  }

  export type BusinessCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    histories?: boolean | BusinessCountOutputTypeCountHistoriesArgs
    scanEvents?: boolean | BusinessCountOutputTypeCountScanEventsArgs
  }

  // Custom InputTypes
  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessCountOutputType
     */
    select?: BusinessCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeCountHistoriesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RedirectHistoryWhereInput
  }

  /**
   * BusinessCountOutputType without action
   */
  export type BusinessCountOutputTypeCountScanEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScanEventWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Business
   */

  export type AggregateBusiness = {
    _count: BusinessCountAggregateOutputType | null
    _min: BusinessMinAggregateOutputType | null
    _max: BusinessMaxAggregateOutputType | null
  }

  export type BusinessMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    slug: string | null
    logoUrl: string | null
    themeHex: string | null
    themeBgHex: string | null
    themeBgHex2: string | null
    publicTitle: string | null
    publicSubtitle: string | null
    publicFooter: string | null
    ctaLabel: string | null
    showLogo: boolean | null
    instagramUrl: string | null
    tiktokUrl: string | null
    youtubeUrl: string | null
    qrInstagram: string | null
    qrTiktok: string | null
    qrYoutube: string | null
  }

  export type BusinessMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    name: string | null
    slug: string | null
    logoUrl: string | null
    themeHex: string | null
    themeBgHex: string | null
    themeBgHex2: string | null
    publicTitle: string | null
    publicSubtitle: string | null
    publicFooter: string | null
    ctaLabel: string | null
    showLogo: boolean | null
    instagramUrl: string | null
    tiktokUrl: string | null
    youtubeUrl: string | null
    qrInstagram: string | null
    qrTiktok: string | null
    qrYoutube: string | null
  }

  export type BusinessCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    name: number
    slug: number
    logoUrl: number
    themeHex: number
    themeBgHex: number
    themeBgHex2: number
    publicTitle: number
    publicSubtitle: number
    publicFooter: number
    ctaLabel: number
    showLogo: number
    instagramUrl: number
    tiktokUrl: number
    youtubeUrl: number
    qrInstagram: number
    qrTiktok: number
    qrYoutube: number
    _all: number
  }


  export type BusinessMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    slug?: true
    logoUrl?: true
    themeHex?: true
    themeBgHex?: true
    themeBgHex2?: true
    publicTitle?: true
    publicSubtitle?: true
    publicFooter?: true
    ctaLabel?: true
    showLogo?: true
    instagramUrl?: true
    tiktokUrl?: true
    youtubeUrl?: true
    qrInstagram?: true
    qrTiktok?: true
    qrYoutube?: true
  }

  export type BusinessMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    slug?: true
    logoUrl?: true
    themeHex?: true
    themeBgHex?: true
    themeBgHex2?: true
    publicTitle?: true
    publicSubtitle?: true
    publicFooter?: true
    ctaLabel?: true
    showLogo?: true
    instagramUrl?: true
    tiktokUrl?: true
    youtubeUrl?: true
    qrInstagram?: true
    qrTiktok?: true
    qrYoutube?: true
  }

  export type BusinessCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    name?: true
    slug?: true
    logoUrl?: true
    themeHex?: true
    themeBgHex?: true
    themeBgHex2?: true
    publicTitle?: true
    publicSubtitle?: true
    publicFooter?: true
    ctaLabel?: true
    showLogo?: true
    instagramUrl?: true
    tiktokUrl?: true
    youtubeUrl?: true
    qrInstagram?: true
    qrTiktok?: true
    qrYoutube?: true
    _all?: true
  }

  export type BusinessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Business to aggregate.
     */
    where?: BusinessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Businesses to fetch.
     */
    orderBy?: BusinessOrderByWithRelationInput | BusinessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BusinessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Businesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Businesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Businesses
    **/
    _count?: true | BusinessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BusinessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BusinessMaxAggregateInputType
  }

  export type GetBusinessAggregateType<T extends BusinessAggregateArgs> = {
        [P in keyof T & keyof AggregateBusiness]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusiness[P]>
      : GetScalarType<T[P], AggregateBusiness[P]>
  }




  export type BusinessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessWhereInput
    orderBy?: BusinessOrderByWithAggregationInput | BusinessOrderByWithAggregationInput[]
    by: BusinessScalarFieldEnum[] | BusinessScalarFieldEnum
    having?: BusinessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BusinessCountAggregateInputType | true
    _min?: BusinessMinAggregateInputType
    _max?: BusinessMaxAggregateInputType
  }

  export type BusinessGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    name: string
    slug: string
    logoUrl: string | null
    themeHex: string | null
    themeBgHex: string | null
    themeBgHex2: string | null
    publicTitle: string | null
    publicSubtitle: string | null
    publicFooter: string | null
    ctaLabel: string | null
    showLogo: boolean
    instagramUrl: string | null
    tiktokUrl: string | null
    youtubeUrl: string | null
    qrInstagram: string | null
    qrTiktok: string | null
    qrYoutube: string | null
    _count: BusinessCountAggregateOutputType | null
    _min: BusinessMinAggregateOutputType | null
    _max: BusinessMaxAggregateOutputType | null
  }

  type GetBusinessGroupByPayload<T extends BusinessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BusinessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BusinessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BusinessGroupByOutputType[P]>
            : GetScalarType<T[P], BusinessGroupByOutputType[P]>
        }
      >
    >


  export type BusinessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    slug?: boolean
    logoUrl?: boolean
    themeHex?: boolean
    themeBgHex?: boolean
    themeBgHex2?: boolean
    publicTitle?: boolean
    publicSubtitle?: boolean
    publicFooter?: boolean
    ctaLabel?: boolean
    showLogo?: boolean
    instagramUrl?: boolean
    tiktokUrl?: boolean
    youtubeUrl?: boolean
    qrInstagram?: boolean
    qrTiktok?: boolean
    qrYoutube?: boolean
    histories?: boolean | Business$historiesArgs<ExtArgs>
    scanEvents?: boolean | Business$scanEventsArgs<ExtArgs>
    _count?: boolean | BusinessCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["business"]>

  export type BusinessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    slug?: boolean
    logoUrl?: boolean
    themeHex?: boolean
    themeBgHex?: boolean
    themeBgHex2?: boolean
    publicTitle?: boolean
    publicSubtitle?: boolean
    publicFooter?: boolean
    ctaLabel?: boolean
    showLogo?: boolean
    instagramUrl?: boolean
    tiktokUrl?: boolean
    youtubeUrl?: boolean
    qrInstagram?: boolean
    qrTiktok?: boolean
    qrYoutube?: boolean
  }, ExtArgs["result"]["business"]>

  export type BusinessSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    name?: boolean
    slug?: boolean
    logoUrl?: boolean
    themeHex?: boolean
    themeBgHex?: boolean
    themeBgHex2?: boolean
    publicTitle?: boolean
    publicSubtitle?: boolean
    publicFooter?: boolean
    ctaLabel?: boolean
    showLogo?: boolean
    instagramUrl?: boolean
    tiktokUrl?: boolean
    youtubeUrl?: boolean
    qrInstagram?: boolean
    qrTiktok?: boolean
    qrYoutube?: boolean
  }

  export type BusinessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    histories?: boolean | Business$historiesArgs<ExtArgs>
    scanEvents?: boolean | Business$scanEventsArgs<ExtArgs>
    _count?: boolean | BusinessCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BusinessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BusinessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Business"
    objects: {
      histories: Prisma.$RedirectHistoryPayload<ExtArgs>[]
      scanEvents: Prisma.$ScanEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      name: string
      slug: string
      logoUrl: string | null
      themeHex: string | null
      themeBgHex: string | null
      themeBgHex2: string | null
      publicTitle: string | null
      publicSubtitle: string | null
      publicFooter: string | null
      ctaLabel: string | null
      showLogo: boolean
      instagramUrl: string | null
      tiktokUrl: string | null
      youtubeUrl: string | null
      qrInstagram: string | null
      qrTiktok: string | null
      qrYoutube: string | null
    }, ExtArgs["result"]["business"]>
    composites: {}
  }

  type BusinessGetPayload<S extends boolean | null | undefined | BusinessDefaultArgs> = $Result.GetResult<Prisma.$BusinessPayload, S>

  type BusinessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BusinessFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BusinessCountAggregateInputType | true
    }

  export interface BusinessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Business'], meta: { name: 'Business' } }
    /**
     * Find zero or one Business that matches the filter.
     * @param {BusinessFindUniqueArgs} args - Arguments to find a Business
     * @example
     * // Get one Business
     * const business = await prisma.business.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BusinessFindUniqueArgs>(args: SelectSubset<T, BusinessFindUniqueArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Business that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BusinessFindUniqueOrThrowArgs} args - Arguments to find a Business
     * @example
     * // Get one Business
     * const business = await prisma.business.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BusinessFindUniqueOrThrowArgs>(args: SelectSubset<T, BusinessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Business that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessFindFirstArgs} args - Arguments to find a Business
     * @example
     * // Get one Business
     * const business = await prisma.business.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BusinessFindFirstArgs>(args?: SelectSubset<T, BusinessFindFirstArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Business that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessFindFirstOrThrowArgs} args - Arguments to find a Business
     * @example
     * // Get one Business
     * const business = await prisma.business.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BusinessFindFirstOrThrowArgs>(args?: SelectSubset<T, BusinessFindFirstOrThrowArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Businesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Businesses
     * const businesses = await prisma.business.findMany()
     * 
     * // Get first 10 Businesses
     * const businesses = await prisma.business.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const businessWithIdOnly = await prisma.business.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BusinessFindManyArgs>(args?: SelectSubset<T, BusinessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Business.
     * @param {BusinessCreateArgs} args - Arguments to create a Business.
     * @example
     * // Create one Business
     * const Business = await prisma.business.create({
     *   data: {
     *     // ... data to create a Business
     *   }
     * })
     * 
     */
    create<T extends BusinessCreateArgs>(args: SelectSubset<T, BusinessCreateArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Businesses.
     * @param {BusinessCreateManyArgs} args - Arguments to create many Businesses.
     * @example
     * // Create many Businesses
     * const business = await prisma.business.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BusinessCreateManyArgs>(args?: SelectSubset<T, BusinessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Businesses and returns the data saved in the database.
     * @param {BusinessCreateManyAndReturnArgs} args - Arguments to create many Businesses.
     * @example
     * // Create many Businesses
     * const business = await prisma.business.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Businesses and only return the `id`
     * const businessWithIdOnly = await prisma.business.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BusinessCreateManyAndReturnArgs>(args?: SelectSubset<T, BusinessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Business.
     * @param {BusinessDeleteArgs} args - Arguments to delete one Business.
     * @example
     * // Delete one Business
     * const Business = await prisma.business.delete({
     *   where: {
     *     // ... filter to delete one Business
     *   }
     * })
     * 
     */
    delete<T extends BusinessDeleteArgs>(args: SelectSubset<T, BusinessDeleteArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Business.
     * @param {BusinessUpdateArgs} args - Arguments to update one Business.
     * @example
     * // Update one Business
     * const business = await prisma.business.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BusinessUpdateArgs>(args: SelectSubset<T, BusinessUpdateArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Businesses.
     * @param {BusinessDeleteManyArgs} args - Arguments to filter Businesses to delete.
     * @example
     * // Delete a few Businesses
     * const { count } = await prisma.business.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BusinessDeleteManyArgs>(args?: SelectSubset<T, BusinessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Businesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Businesses
     * const business = await prisma.business.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BusinessUpdateManyArgs>(args: SelectSubset<T, BusinessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Business.
     * @param {BusinessUpsertArgs} args - Arguments to update or create a Business.
     * @example
     * // Update or create a Business
     * const business = await prisma.business.upsert({
     *   create: {
     *     // ... data to create a Business
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Business we want to update
     *   }
     * })
     */
    upsert<T extends BusinessUpsertArgs>(args: SelectSubset<T, BusinessUpsertArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Businesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessCountArgs} args - Arguments to filter Businesses to count.
     * @example
     * // Count the number of Businesses
     * const count = await prisma.business.count({
     *   where: {
     *     // ... the filter for the Businesses we want to count
     *   }
     * })
    **/
    count<T extends BusinessCountArgs>(
      args?: Subset<T, BusinessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BusinessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Business.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BusinessAggregateArgs>(args: Subset<T, BusinessAggregateArgs>): Prisma.PrismaPromise<GetBusinessAggregateType<T>>

    /**
     * Group by Business.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BusinessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusinessGroupByArgs['orderBy'] }
        : { orderBy?: BusinessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BusinessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusinessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Business model
   */
  readonly fields: BusinessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Business.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BusinessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    histories<T extends Business$historiesArgs<ExtArgs> = {}>(args?: Subset<T, Business$historiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RedirectHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    scanEvents<T extends Business$scanEventsArgs<ExtArgs> = {}>(args?: Subset<T, Business$scanEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScanEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Business model
   */ 
  interface BusinessFieldRefs {
    readonly id: FieldRef<"Business", 'String'>
    readonly createdAt: FieldRef<"Business", 'DateTime'>
    readonly updatedAt: FieldRef<"Business", 'DateTime'>
    readonly name: FieldRef<"Business", 'String'>
    readonly slug: FieldRef<"Business", 'String'>
    readonly logoUrl: FieldRef<"Business", 'String'>
    readonly themeHex: FieldRef<"Business", 'String'>
    readonly themeBgHex: FieldRef<"Business", 'String'>
    readonly themeBgHex2: FieldRef<"Business", 'String'>
    readonly publicTitle: FieldRef<"Business", 'String'>
    readonly publicSubtitle: FieldRef<"Business", 'String'>
    readonly publicFooter: FieldRef<"Business", 'String'>
    readonly ctaLabel: FieldRef<"Business", 'String'>
    readonly showLogo: FieldRef<"Business", 'Boolean'>
    readonly instagramUrl: FieldRef<"Business", 'String'>
    readonly tiktokUrl: FieldRef<"Business", 'String'>
    readonly youtubeUrl: FieldRef<"Business", 'String'>
    readonly qrInstagram: FieldRef<"Business", 'String'>
    readonly qrTiktok: FieldRef<"Business", 'String'>
    readonly qrYoutube: FieldRef<"Business", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Business findUnique
   */
  export type BusinessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * Filter, which Business to fetch.
     */
    where: BusinessWhereUniqueInput
  }

  /**
   * Business findUniqueOrThrow
   */
  export type BusinessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * Filter, which Business to fetch.
     */
    where: BusinessWhereUniqueInput
  }

  /**
   * Business findFirst
   */
  export type BusinessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * Filter, which Business to fetch.
     */
    where?: BusinessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Businesses to fetch.
     */
    orderBy?: BusinessOrderByWithRelationInput | BusinessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Businesses.
     */
    cursor?: BusinessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Businesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Businesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Businesses.
     */
    distinct?: BusinessScalarFieldEnum | BusinessScalarFieldEnum[]
  }

  /**
   * Business findFirstOrThrow
   */
  export type BusinessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * Filter, which Business to fetch.
     */
    where?: BusinessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Businesses to fetch.
     */
    orderBy?: BusinessOrderByWithRelationInput | BusinessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Businesses.
     */
    cursor?: BusinessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Businesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Businesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Businesses.
     */
    distinct?: BusinessScalarFieldEnum | BusinessScalarFieldEnum[]
  }

  /**
   * Business findMany
   */
  export type BusinessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * Filter, which Businesses to fetch.
     */
    where?: BusinessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Businesses to fetch.
     */
    orderBy?: BusinessOrderByWithRelationInput | BusinessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Businesses.
     */
    cursor?: BusinessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Businesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Businesses.
     */
    skip?: number
    distinct?: BusinessScalarFieldEnum | BusinessScalarFieldEnum[]
  }

  /**
   * Business create
   */
  export type BusinessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * The data needed to create a Business.
     */
    data: XOR<BusinessCreateInput, BusinessUncheckedCreateInput>
  }

  /**
   * Business createMany
   */
  export type BusinessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Businesses.
     */
    data: BusinessCreateManyInput | BusinessCreateManyInput[]
  }

  /**
   * Business createManyAndReturn
   */
  export type BusinessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Businesses.
     */
    data: BusinessCreateManyInput | BusinessCreateManyInput[]
  }

  /**
   * Business update
   */
  export type BusinessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * The data needed to update a Business.
     */
    data: XOR<BusinessUpdateInput, BusinessUncheckedUpdateInput>
    /**
     * Choose, which Business to update.
     */
    where: BusinessWhereUniqueInput
  }

  /**
   * Business updateMany
   */
  export type BusinessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Businesses.
     */
    data: XOR<BusinessUpdateManyMutationInput, BusinessUncheckedUpdateManyInput>
    /**
     * Filter which Businesses to update
     */
    where?: BusinessWhereInput
  }

  /**
   * Business upsert
   */
  export type BusinessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * The filter to search for the Business to update in case it exists.
     */
    where: BusinessWhereUniqueInput
    /**
     * In case the Business found by the `where` argument doesn't exist, create a new Business with this data.
     */
    create: XOR<BusinessCreateInput, BusinessUncheckedCreateInput>
    /**
     * In case the Business was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BusinessUpdateInput, BusinessUncheckedUpdateInput>
  }

  /**
   * Business delete
   */
  export type BusinessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
    /**
     * Filter which Business to delete.
     */
    where: BusinessWhereUniqueInput
  }

  /**
   * Business deleteMany
   */
  export type BusinessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Businesses to delete
     */
    where?: BusinessWhereInput
  }

  /**
   * Business.histories
   */
  export type Business$historiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedirectHistory
     */
    select?: RedirectHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedirectHistoryInclude<ExtArgs> | null
    where?: RedirectHistoryWhereInput
    orderBy?: RedirectHistoryOrderByWithRelationInput | RedirectHistoryOrderByWithRelationInput[]
    cursor?: RedirectHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RedirectHistoryScalarFieldEnum | RedirectHistoryScalarFieldEnum[]
  }

  /**
   * Business.scanEvents
   */
  export type Business$scanEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScanEvent
     */
    select?: ScanEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanEventInclude<ExtArgs> | null
    where?: ScanEventWhereInput
    orderBy?: ScanEventOrderByWithRelationInput | ScanEventOrderByWithRelationInput[]
    cursor?: ScanEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScanEventScalarFieldEnum | ScanEventScalarFieldEnum[]
  }

  /**
   * Business without action
   */
  export type BusinessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Business
     */
    select?: BusinessSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInclude<ExtArgs> | null
  }


  /**
   * Model RedirectHistory
   */

  export type AggregateRedirectHistory = {
    _count: RedirectHistoryCountAggregateOutputType | null
    _min: RedirectHistoryMinAggregateOutputType | null
    _max: RedirectHistoryMaxAggregateOutputType | null
  }

  export type RedirectHistoryMinAggregateOutputType = {
    id: string | null
    businessId: string | null
    platform: string | null
    fromUrl: string | null
    toUrl: string | null
    changedAt: Date | null
  }

  export type RedirectHistoryMaxAggregateOutputType = {
    id: string | null
    businessId: string | null
    platform: string | null
    fromUrl: string | null
    toUrl: string | null
    changedAt: Date | null
  }

  export type RedirectHistoryCountAggregateOutputType = {
    id: number
    businessId: number
    platform: number
    fromUrl: number
    toUrl: number
    changedAt: number
    _all: number
  }


  export type RedirectHistoryMinAggregateInputType = {
    id?: true
    businessId?: true
    platform?: true
    fromUrl?: true
    toUrl?: true
    changedAt?: true
  }

  export type RedirectHistoryMaxAggregateInputType = {
    id?: true
    businessId?: true
    platform?: true
    fromUrl?: true
    toUrl?: true
    changedAt?: true
  }

  export type RedirectHistoryCountAggregateInputType = {
    id?: true
    businessId?: true
    platform?: true
    fromUrl?: true
    toUrl?: true
    changedAt?: true
    _all?: true
  }

  export type RedirectHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RedirectHistory to aggregate.
     */
    where?: RedirectHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RedirectHistories to fetch.
     */
    orderBy?: RedirectHistoryOrderByWithRelationInput | RedirectHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RedirectHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RedirectHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RedirectHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RedirectHistories
    **/
    _count?: true | RedirectHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RedirectHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RedirectHistoryMaxAggregateInputType
  }

  export type GetRedirectHistoryAggregateType<T extends RedirectHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateRedirectHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRedirectHistory[P]>
      : GetScalarType<T[P], AggregateRedirectHistory[P]>
  }




  export type RedirectHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RedirectHistoryWhereInput
    orderBy?: RedirectHistoryOrderByWithAggregationInput | RedirectHistoryOrderByWithAggregationInput[]
    by: RedirectHistoryScalarFieldEnum[] | RedirectHistoryScalarFieldEnum
    having?: RedirectHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RedirectHistoryCountAggregateInputType | true
    _min?: RedirectHistoryMinAggregateInputType
    _max?: RedirectHistoryMaxAggregateInputType
  }

  export type RedirectHistoryGroupByOutputType = {
    id: string
    businessId: string
    platform: string
    fromUrl: string | null
    toUrl: string
    changedAt: Date
    _count: RedirectHistoryCountAggregateOutputType | null
    _min: RedirectHistoryMinAggregateOutputType | null
    _max: RedirectHistoryMaxAggregateOutputType | null
  }

  type GetRedirectHistoryGroupByPayload<T extends RedirectHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RedirectHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RedirectHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RedirectHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], RedirectHistoryGroupByOutputType[P]>
        }
      >
    >


  export type RedirectHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessId?: boolean
    platform?: boolean
    fromUrl?: boolean
    toUrl?: boolean
    changedAt?: boolean
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["redirectHistory"]>

  export type RedirectHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessId?: boolean
    platform?: boolean
    fromUrl?: boolean
    toUrl?: boolean
    changedAt?: boolean
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["redirectHistory"]>

  export type RedirectHistorySelectScalar = {
    id?: boolean
    businessId?: boolean
    platform?: boolean
    fromUrl?: boolean
    toUrl?: boolean
    changedAt?: boolean
  }

  export type RedirectHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }
  export type RedirectHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }

  export type $RedirectHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RedirectHistory"
    objects: {
      business: Prisma.$BusinessPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      businessId: string
      platform: string
      fromUrl: string | null
      toUrl: string
      changedAt: Date
    }, ExtArgs["result"]["redirectHistory"]>
    composites: {}
  }

  type RedirectHistoryGetPayload<S extends boolean | null | undefined | RedirectHistoryDefaultArgs> = $Result.GetResult<Prisma.$RedirectHistoryPayload, S>

  type RedirectHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RedirectHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RedirectHistoryCountAggregateInputType | true
    }

  export interface RedirectHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RedirectHistory'], meta: { name: 'RedirectHistory' } }
    /**
     * Find zero or one RedirectHistory that matches the filter.
     * @param {RedirectHistoryFindUniqueArgs} args - Arguments to find a RedirectHistory
     * @example
     * // Get one RedirectHistory
     * const redirectHistory = await prisma.redirectHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RedirectHistoryFindUniqueArgs>(args: SelectSubset<T, RedirectHistoryFindUniqueArgs<ExtArgs>>): Prisma__RedirectHistoryClient<$Result.GetResult<Prisma.$RedirectHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RedirectHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RedirectHistoryFindUniqueOrThrowArgs} args - Arguments to find a RedirectHistory
     * @example
     * // Get one RedirectHistory
     * const redirectHistory = await prisma.redirectHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RedirectHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, RedirectHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RedirectHistoryClient<$Result.GetResult<Prisma.$RedirectHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RedirectHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedirectHistoryFindFirstArgs} args - Arguments to find a RedirectHistory
     * @example
     * // Get one RedirectHistory
     * const redirectHistory = await prisma.redirectHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RedirectHistoryFindFirstArgs>(args?: SelectSubset<T, RedirectHistoryFindFirstArgs<ExtArgs>>): Prisma__RedirectHistoryClient<$Result.GetResult<Prisma.$RedirectHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RedirectHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedirectHistoryFindFirstOrThrowArgs} args - Arguments to find a RedirectHistory
     * @example
     * // Get one RedirectHistory
     * const redirectHistory = await prisma.redirectHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RedirectHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, RedirectHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__RedirectHistoryClient<$Result.GetResult<Prisma.$RedirectHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RedirectHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedirectHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RedirectHistories
     * const redirectHistories = await prisma.redirectHistory.findMany()
     * 
     * // Get first 10 RedirectHistories
     * const redirectHistories = await prisma.redirectHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const redirectHistoryWithIdOnly = await prisma.redirectHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RedirectHistoryFindManyArgs>(args?: SelectSubset<T, RedirectHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RedirectHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RedirectHistory.
     * @param {RedirectHistoryCreateArgs} args - Arguments to create a RedirectHistory.
     * @example
     * // Create one RedirectHistory
     * const RedirectHistory = await prisma.redirectHistory.create({
     *   data: {
     *     // ... data to create a RedirectHistory
     *   }
     * })
     * 
     */
    create<T extends RedirectHistoryCreateArgs>(args: SelectSubset<T, RedirectHistoryCreateArgs<ExtArgs>>): Prisma__RedirectHistoryClient<$Result.GetResult<Prisma.$RedirectHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RedirectHistories.
     * @param {RedirectHistoryCreateManyArgs} args - Arguments to create many RedirectHistories.
     * @example
     * // Create many RedirectHistories
     * const redirectHistory = await prisma.redirectHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RedirectHistoryCreateManyArgs>(args?: SelectSubset<T, RedirectHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RedirectHistories and returns the data saved in the database.
     * @param {RedirectHistoryCreateManyAndReturnArgs} args - Arguments to create many RedirectHistories.
     * @example
     * // Create many RedirectHistories
     * const redirectHistory = await prisma.redirectHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RedirectHistories and only return the `id`
     * const redirectHistoryWithIdOnly = await prisma.redirectHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RedirectHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, RedirectHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RedirectHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RedirectHistory.
     * @param {RedirectHistoryDeleteArgs} args - Arguments to delete one RedirectHistory.
     * @example
     * // Delete one RedirectHistory
     * const RedirectHistory = await prisma.redirectHistory.delete({
     *   where: {
     *     // ... filter to delete one RedirectHistory
     *   }
     * })
     * 
     */
    delete<T extends RedirectHistoryDeleteArgs>(args: SelectSubset<T, RedirectHistoryDeleteArgs<ExtArgs>>): Prisma__RedirectHistoryClient<$Result.GetResult<Prisma.$RedirectHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RedirectHistory.
     * @param {RedirectHistoryUpdateArgs} args - Arguments to update one RedirectHistory.
     * @example
     * // Update one RedirectHistory
     * const redirectHistory = await prisma.redirectHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RedirectHistoryUpdateArgs>(args: SelectSubset<T, RedirectHistoryUpdateArgs<ExtArgs>>): Prisma__RedirectHistoryClient<$Result.GetResult<Prisma.$RedirectHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RedirectHistories.
     * @param {RedirectHistoryDeleteManyArgs} args - Arguments to filter RedirectHistories to delete.
     * @example
     * // Delete a few RedirectHistories
     * const { count } = await prisma.redirectHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RedirectHistoryDeleteManyArgs>(args?: SelectSubset<T, RedirectHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RedirectHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedirectHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RedirectHistories
     * const redirectHistory = await prisma.redirectHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RedirectHistoryUpdateManyArgs>(args: SelectSubset<T, RedirectHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RedirectHistory.
     * @param {RedirectHistoryUpsertArgs} args - Arguments to update or create a RedirectHistory.
     * @example
     * // Update or create a RedirectHistory
     * const redirectHistory = await prisma.redirectHistory.upsert({
     *   create: {
     *     // ... data to create a RedirectHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RedirectHistory we want to update
     *   }
     * })
     */
    upsert<T extends RedirectHistoryUpsertArgs>(args: SelectSubset<T, RedirectHistoryUpsertArgs<ExtArgs>>): Prisma__RedirectHistoryClient<$Result.GetResult<Prisma.$RedirectHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RedirectHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedirectHistoryCountArgs} args - Arguments to filter RedirectHistories to count.
     * @example
     * // Count the number of RedirectHistories
     * const count = await prisma.redirectHistory.count({
     *   where: {
     *     // ... the filter for the RedirectHistories we want to count
     *   }
     * })
    **/
    count<T extends RedirectHistoryCountArgs>(
      args?: Subset<T, RedirectHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RedirectHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RedirectHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedirectHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RedirectHistoryAggregateArgs>(args: Subset<T, RedirectHistoryAggregateArgs>): Prisma.PrismaPromise<GetRedirectHistoryAggregateType<T>>

    /**
     * Group by RedirectHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RedirectHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RedirectHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RedirectHistoryGroupByArgs['orderBy'] }
        : { orderBy?: RedirectHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RedirectHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRedirectHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RedirectHistory model
   */
  readonly fields: RedirectHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RedirectHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RedirectHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    business<T extends BusinessDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BusinessDefaultArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RedirectHistory model
   */ 
  interface RedirectHistoryFieldRefs {
    readonly id: FieldRef<"RedirectHistory", 'String'>
    readonly businessId: FieldRef<"RedirectHistory", 'String'>
    readonly platform: FieldRef<"RedirectHistory", 'String'>
    readonly fromUrl: FieldRef<"RedirectHistory", 'String'>
    readonly toUrl: FieldRef<"RedirectHistory", 'String'>
    readonly changedAt: FieldRef<"RedirectHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RedirectHistory findUnique
   */
  export type RedirectHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedirectHistory
     */
    select?: RedirectHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedirectHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RedirectHistory to fetch.
     */
    where: RedirectHistoryWhereUniqueInput
  }

  /**
   * RedirectHistory findUniqueOrThrow
   */
  export type RedirectHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedirectHistory
     */
    select?: RedirectHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedirectHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RedirectHistory to fetch.
     */
    where: RedirectHistoryWhereUniqueInput
  }

  /**
   * RedirectHistory findFirst
   */
  export type RedirectHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedirectHistory
     */
    select?: RedirectHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedirectHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RedirectHistory to fetch.
     */
    where?: RedirectHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RedirectHistories to fetch.
     */
    orderBy?: RedirectHistoryOrderByWithRelationInput | RedirectHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RedirectHistories.
     */
    cursor?: RedirectHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RedirectHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RedirectHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RedirectHistories.
     */
    distinct?: RedirectHistoryScalarFieldEnum | RedirectHistoryScalarFieldEnum[]
  }

  /**
   * RedirectHistory findFirstOrThrow
   */
  export type RedirectHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedirectHistory
     */
    select?: RedirectHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedirectHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RedirectHistory to fetch.
     */
    where?: RedirectHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RedirectHistories to fetch.
     */
    orderBy?: RedirectHistoryOrderByWithRelationInput | RedirectHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RedirectHistories.
     */
    cursor?: RedirectHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RedirectHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RedirectHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RedirectHistories.
     */
    distinct?: RedirectHistoryScalarFieldEnum | RedirectHistoryScalarFieldEnum[]
  }

  /**
   * RedirectHistory findMany
   */
  export type RedirectHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedirectHistory
     */
    select?: RedirectHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedirectHistoryInclude<ExtArgs> | null
    /**
     * Filter, which RedirectHistories to fetch.
     */
    where?: RedirectHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RedirectHistories to fetch.
     */
    orderBy?: RedirectHistoryOrderByWithRelationInput | RedirectHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RedirectHistories.
     */
    cursor?: RedirectHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RedirectHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RedirectHistories.
     */
    skip?: number
    distinct?: RedirectHistoryScalarFieldEnum | RedirectHistoryScalarFieldEnum[]
  }

  /**
   * RedirectHistory create
   */
  export type RedirectHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedirectHistory
     */
    select?: RedirectHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedirectHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a RedirectHistory.
     */
    data: XOR<RedirectHistoryCreateInput, RedirectHistoryUncheckedCreateInput>
  }

  /**
   * RedirectHistory createMany
   */
  export type RedirectHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RedirectHistories.
     */
    data: RedirectHistoryCreateManyInput | RedirectHistoryCreateManyInput[]
  }

  /**
   * RedirectHistory createManyAndReturn
   */
  export type RedirectHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedirectHistory
     */
    select?: RedirectHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RedirectHistories.
     */
    data: RedirectHistoryCreateManyInput | RedirectHistoryCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedirectHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RedirectHistory update
   */
  export type RedirectHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedirectHistory
     */
    select?: RedirectHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedirectHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a RedirectHistory.
     */
    data: XOR<RedirectHistoryUpdateInput, RedirectHistoryUncheckedUpdateInput>
    /**
     * Choose, which RedirectHistory to update.
     */
    where: RedirectHistoryWhereUniqueInput
  }

  /**
   * RedirectHistory updateMany
   */
  export type RedirectHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RedirectHistories.
     */
    data: XOR<RedirectHistoryUpdateManyMutationInput, RedirectHistoryUncheckedUpdateManyInput>
    /**
     * Filter which RedirectHistories to update
     */
    where?: RedirectHistoryWhereInput
  }

  /**
   * RedirectHistory upsert
   */
  export type RedirectHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedirectHistory
     */
    select?: RedirectHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedirectHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the RedirectHistory to update in case it exists.
     */
    where: RedirectHistoryWhereUniqueInput
    /**
     * In case the RedirectHistory found by the `where` argument doesn't exist, create a new RedirectHistory with this data.
     */
    create: XOR<RedirectHistoryCreateInput, RedirectHistoryUncheckedCreateInput>
    /**
     * In case the RedirectHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RedirectHistoryUpdateInput, RedirectHistoryUncheckedUpdateInput>
  }

  /**
   * RedirectHistory delete
   */
  export type RedirectHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedirectHistory
     */
    select?: RedirectHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedirectHistoryInclude<ExtArgs> | null
    /**
     * Filter which RedirectHistory to delete.
     */
    where: RedirectHistoryWhereUniqueInput
  }

  /**
   * RedirectHistory deleteMany
   */
  export type RedirectHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RedirectHistories to delete
     */
    where?: RedirectHistoryWhereInput
  }

  /**
   * RedirectHistory without action
   */
  export type RedirectHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RedirectHistory
     */
    select?: RedirectHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RedirectHistoryInclude<ExtArgs> | null
  }


  /**
   * Model ScanEvent
   */

  export type AggregateScanEvent = {
    _count: ScanEventCountAggregateOutputType | null
    _min: ScanEventMinAggregateOutputType | null
    _max: ScanEventMaxAggregateOutputType | null
  }

  export type ScanEventMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    businessId: string | null
    platform: string | null
    userAgent: string | null
    ipHash: string | null
    referer: string | null
  }

  export type ScanEventMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    businessId: string | null
    platform: string | null
    userAgent: string | null
    ipHash: string | null
    referer: string | null
  }

  export type ScanEventCountAggregateOutputType = {
    id: number
    createdAt: number
    businessId: number
    platform: number
    userAgent: number
    ipHash: number
    referer: number
    _all: number
  }


  export type ScanEventMinAggregateInputType = {
    id?: true
    createdAt?: true
    businessId?: true
    platform?: true
    userAgent?: true
    ipHash?: true
    referer?: true
  }

  export type ScanEventMaxAggregateInputType = {
    id?: true
    createdAt?: true
    businessId?: true
    platform?: true
    userAgent?: true
    ipHash?: true
    referer?: true
  }

  export type ScanEventCountAggregateInputType = {
    id?: true
    createdAt?: true
    businessId?: true
    platform?: true
    userAgent?: true
    ipHash?: true
    referer?: true
    _all?: true
  }

  export type ScanEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScanEvent to aggregate.
     */
    where?: ScanEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScanEvents to fetch.
     */
    orderBy?: ScanEventOrderByWithRelationInput | ScanEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScanEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScanEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScanEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScanEvents
    **/
    _count?: true | ScanEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScanEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScanEventMaxAggregateInputType
  }

  export type GetScanEventAggregateType<T extends ScanEventAggregateArgs> = {
        [P in keyof T & keyof AggregateScanEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScanEvent[P]>
      : GetScalarType<T[P], AggregateScanEvent[P]>
  }




  export type ScanEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScanEventWhereInput
    orderBy?: ScanEventOrderByWithAggregationInput | ScanEventOrderByWithAggregationInput[]
    by: ScanEventScalarFieldEnum[] | ScanEventScalarFieldEnum
    having?: ScanEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScanEventCountAggregateInputType | true
    _min?: ScanEventMinAggregateInputType
    _max?: ScanEventMaxAggregateInputType
  }

  export type ScanEventGroupByOutputType = {
    id: string
    createdAt: Date
    businessId: string
    platform: string
    userAgent: string | null
    ipHash: string | null
    referer: string | null
    _count: ScanEventCountAggregateOutputType | null
    _min: ScanEventMinAggregateOutputType | null
    _max: ScanEventMaxAggregateOutputType | null
  }

  type GetScanEventGroupByPayload<T extends ScanEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScanEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScanEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScanEventGroupByOutputType[P]>
            : GetScalarType<T[P], ScanEventGroupByOutputType[P]>
        }
      >
    >


  export type ScanEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    businessId?: boolean
    platform?: boolean
    userAgent?: boolean
    ipHash?: boolean
    referer?: boolean
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scanEvent"]>

  export type ScanEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    businessId?: boolean
    platform?: boolean
    userAgent?: boolean
    ipHash?: boolean
    referer?: boolean
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scanEvent"]>

  export type ScanEventSelectScalar = {
    id?: boolean
    createdAt?: boolean
    businessId?: boolean
    platform?: boolean
    userAgent?: boolean
    ipHash?: boolean
    referer?: boolean
  }

  export type ScanEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }
  export type ScanEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    business?: boolean | BusinessDefaultArgs<ExtArgs>
  }

  export type $ScanEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScanEvent"
    objects: {
      business: Prisma.$BusinessPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      businessId: string
      platform: string
      userAgent: string | null
      ipHash: string | null
      referer: string | null
    }, ExtArgs["result"]["scanEvent"]>
    composites: {}
  }

  type ScanEventGetPayload<S extends boolean | null | undefined | ScanEventDefaultArgs> = $Result.GetResult<Prisma.$ScanEventPayload, S>

  type ScanEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ScanEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ScanEventCountAggregateInputType | true
    }

  export interface ScanEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScanEvent'], meta: { name: 'ScanEvent' } }
    /**
     * Find zero or one ScanEvent that matches the filter.
     * @param {ScanEventFindUniqueArgs} args - Arguments to find a ScanEvent
     * @example
     * // Get one ScanEvent
     * const scanEvent = await prisma.scanEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScanEventFindUniqueArgs>(args: SelectSubset<T, ScanEventFindUniqueArgs<ExtArgs>>): Prisma__ScanEventClient<$Result.GetResult<Prisma.$ScanEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ScanEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ScanEventFindUniqueOrThrowArgs} args - Arguments to find a ScanEvent
     * @example
     * // Get one ScanEvent
     * const scanEvent = await prisma.scanEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScanEventFindUniqueOrThrowArgs>(args: SelectSubset<T, ScanEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScanEventClient<$Result.GetResult<Prisma.$ScanEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ScanEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanEventFindFirstArgs} args - Arguments to find a ScanEvent
     * @example
     * // Get one ScanEvent
     * const scanEvent = await prisma.scanEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScanEventFindFirstArgs>(args?: SelectSubset<T, ScanEventFindFirstArgs<ExtArgs>>): Prisma__ScanEventClient<$Result.GetResult<Prisma.$ScanEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ScanEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanEventFindFirstOrThrowArgs} args - Arguments to find a ScanEvent
     * @example
     * // Get one ScanEvent
     * const scanEvent = await prisma.scanEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScanEventFindFirstOrThrowArgs>(args?: SelectSubset<T, ScanEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScanEventClient<$Result.GetResult<Prisma.$ScanEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ScanEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScanEvents
     * const scanEvents = await prisma.scanEvent.findMany()
     * 
     * // Get first 10 ScanEvents
     * const scanEvents = await prisma.scanEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scanEventWithIdOnly = await prisma.scanEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScanEventFindManyArgs>(args?: SelectSubset<T, ScanEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScanEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ScanEvent.
     * @param {ScanEventCreateArgs} args - Arguments to create a ScanEvent.
     * @example
     * // Create one ScanEvent
     * const ScanEvent = await prisma.scanEvent.create({
     *   data: {
     *     // ... data to create a ScanEvent
     *   }
     * })
     * 
     */
    create<T extends ScanEventCreateArgs>(args: SelectSubset<T, ScanEventCreateArgs<ExtArgs>>): Prisma__ScanEventClient<$Result.GetResult<Prisma.$ScanEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ScanEvents.
     * @param {ScanEventCreateManyArgs} args - Arguments to create many ScanEvents.
     * @example
     * // Create many ScanEvents
     * const scanEvent = await prisma.scanEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScanEventCreateManyArgs>(args?: SelectSubset<T, ScanEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScanEvents and returns the data saved in the database.
     * @param {ScanEventCreateManyAndReturnArgs} args - Arguments to create many ScanEvents.
     * @example
     * // Create many ScanEvents
     * const scanEvent = await prisma.scanEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScanEvents and only return the `id`
     * const scanEventWithIdOnly = await prisma.scanEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScanEventCreateManyAndReturnArgs>(args?: SelectSubset<T, ScanEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScanEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ScanEvent.
     * @param {ScanEventDeleteArgs} args - Arguments to delete one ScanEvent.
     * @example
     * // Delete one ScanEvent
     * const ScanEvent = await prisma.scanEvent.delete({
     *   where: {
     *     // ... filter to delete one ScanEvent
     *   }
     * })
     * 
     */
    delete<T extends ScanEventDeleteArgs>(args: SelectSubset<T, ScanEventDeleteArgs<ExtArgs>>): Prisma__ScanEventClient<$Result.GetResult<Prisma.$ScanEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ScanEvent.
     * @param {ScanEventUpdateArgs} args - Arguments to update one ScanEvent.
     * @example
     * // Update one ScanEvent
     * const scanEvent = await prisma.scanEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScanEventUpdateArgs>(args: SelectSubset<T, ScanEventUpdateArgs<ExtArgs>>): Prisma__ScanEventClient<$Result.GetResult<Prisma.$ScanEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ScanEvents.
     * @param {ScanEventDeleteManyArgs} args - Arguments to filter ScanEvents to delete.
     * @example
     * // Delete a few ScanEvents
     * const { count } = await prisma.scanEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScanEventDeleteManyArgs>(args?: SelectSubset<T, ScanEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScanEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScanEvents
     * const scanEvent = await prisma.scanEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScanEventUpdateManyArgs>(args: SelectSubset<T, ScanEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ScanEvent.
     * @param {ScanEventUpsertArgs} args - Arguments to update or create a ScanEvent.
     * @example
     * // Update or create a ScanEvent
     * const scanEvent = await prisma.scanEvent.upsert({
     *   create: {
     *     // ... data to create a ScanEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScanEvent we want to update
     *   }
     * })
     */
    upsert<T extends ScanEventUpsertArgs>(args: SelectSubset<T, ScanEventUpsertArgs<ExtArgs>>): Prisma__ScanEventClient<$Result.GetResult<Prisma.$ScanEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ScanEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanEventCountArgs} args - Arguments to filter ScanEvents to count.
     * @example
     * // Count the number of ScanEvents
     * const count = await prisma.scanEvent.count({
     *   where: {
     *     // ... the filter for the ScanEvents we want to count
     *   }
     * })
    **/
    count<T extends ScanEventCountArgs>(
      args?: Subset<T, ScanEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScanEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScanEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScanEventAggregateArgs>(args: Subset<T, ScanEventAggregateArgs>): Prisma.PrismaPromise<GetScanEventAggregateType<T>>

    /**
     * Group by ScanEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScanEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScanEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScanEventGroupByArgs['orderBy'] }
        : { orderBy?: ScanEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScanEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScanEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScanEvent model
   */
  readonly fields: ScanEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScanEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScanEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    business<T extends BusinessDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BusinessDefaultArgs<ExtArgs>>): Prisma__BusinessClient<$Result.GetResult<Prisma.$BusinessPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScanEvent model
   */ 
  interface ScanEventFieldRefs {
    readonly id: FieldRef<"ScanEvent", 'String'>
    readonly createdAt: FieldRef<"ScanEvent", 'DateTime'>
    readonly businessId: FieldRef<"ScanEvent", 'String'>
    readonly platform: FieldRef<"ScanEvent", 'String'>
    readonly userAgent: FieldRef<"ScanEvent", 'String'>
    readonly ipHash: FieldRef<"ScanEvent", 'String'>
    readonly referer: FieldRef<"ScanEvent", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ScanEvent findUnique
   */
  export type ScanEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScanEvent
     */
    select?: ScanEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanEventInclude<ExtArgs> | null
    /**
     * Filter, which ScanEvent to fetch.
     */
    where: ScanEventWhereUniqueInput
  }

  /**
   * ScanEvent findUniqueOrThrow
   */
  export type ScanEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScanEvent
     */
    select?: ScanEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanEventInclude<ExtArgs> | null
    /**
     * Filter, which ScanEvent to fetch.
     */
    where: ScanEventWhereUniqueInput
  }

  /**
   * ScanEvent findFirst
   */
  export type ScanEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScanEvent
     */
    select?: ScanEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanEventInclude<ExtArgs> | null
    /**
     * Filter, which ScanEvent to fetch.
     */
    where?: ScanEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScanEvents to fetch.
     */
    orderBy?: ScanEventOrderByWithRelationInput | ScanEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScanEvents.
     */
    cursor?: ScanEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScanEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScanEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScanEvents.
     */
    distinct?: ScanEventScalarFieldEnum | ScanEventScalarFieldEnum[]
  }

  /**
   * ScanEvent findFirstOrThrow
   */
  export type ScanEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScanEvent
     */
    select?: ScanEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanEventInclude<ExtArgs> | null
    /**
     * Filter, which ScanEvent to fetch.
     */
    where?: ScanEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScanEvents to fetch.
     */
    orderBy?: ScanEventOrderByWithRelationInput | ScanEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScanEvents.
     */
    cursor?: ScanEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScanEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScanEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScanEvents.
     */
    distinct?: ScanEventScalarFieldEnum | ScanEventScalarFieldEnum[]
  }

  /**
   * ScanEvent findMany
   */
  export type ScanEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScanEvent
     */
    select?: ScanEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanEventInclude<ExtArgs> | null
    /**
     * Filter, which ScanEvents to fetch.
     */
    where?: ScanEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScanEvents to fetch.
     */
    orderBy?: ScanEventOrderByWithRelationInput | ScanEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScanEvents.
     */
    cursor?: ScanEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScanEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScanEvents.
     */
    skip?: number
    distinct?: ScanEventScalarFieldEnum | ScanEventScalarFieldEnum[]
  }

  /**
   * ScanEvent create
   */
  export type ScanEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScanEvent
     */
    select?: ScanEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanEventInclude<ExtArgs> | null
    /**
     * The data needed to create a ScanEvent.
     */
    data: XOR<ScanEventCreateInput, ScanEventUncheckedCreateInput>
  }

  /**
   * ScanEvent createMany
   */
  export type ScanEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScanEvents.
     */
    data: ScanEventCreateManyInput | ScanEventCreateManyInput[]
  }

  /**
   * ScanEvent createManyAndReturn
   */
  export type ScanEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScanEvent
     */
    select?: ScanEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ScanEvents.
     */
    data: ScanEventCreateManyInput | ScanEventCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScanEvent update
   */
  export type ScanEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScanEvent
     */
    select?: ScanEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanEventInclude<ExtArgs> | null
    /**
     * The data needed to update a ScanEvent.
     */
    data: XOR<ScanEventUpdateInput, ScanEventUncheckedUpdateInput>
    /**
     * Choose, which ScanEvent to update.
     */
    where: ScanEventWhereUniqueInput
  }

  /**
   * ScanEvent updateMany
   */
  export type ScanEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScanEvents.
     */
    data: XOR<ScanEventUpdateManyMutationInput, ScanEventUncheckedUpdateManyInput>
    /**
     * Filter which ScanEvents to update
     */
    where?: ScanEventWhereInput
  }

  /**
   * ScanEvent upsert
   */
  export type ScanEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScanEvent
     */
    select?: ScanEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanEventInclude<ExtArgs> | null
    /**
     * The filter to search for the ScanEvent to update in case it exists.
     */
    where: ScanEventWhereUniqueInput
    /**
     * In case the ScanEvent found by the `where` argument doesn't exist, create a new ScanEvent with this data.
     */
    create: XOR<ScanEventCreateInput, ScanEventUncheckedCreateInput>
    /**
     * In case the ScanEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScanEventUpdateInput, ScanEventUncheckedUpdateInput>
  }

  /**
   * ScanEvent delete
   */
  export type ScanEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScanEvent
     */
    select?: ScanEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanEventInclude<ExtArgs> | null
    /**
     * Filter which ScanEvent to delete.
     */
    where: ScanEventWhereUniqueInput
  }

  /**
   * ScanEvent deleteMany
   */
  export type ScanEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScanEvents to delete
     */
    where?: ScanEventWhereInput
  }

  /**
   * ScanEvent without action
   */
  export type ScanEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScanEvent
     */
    select?: ScanEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScanEventInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const BusinessScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    name: 'name',
    slug: 'slug',
    logoUrl: 'logoUrl',
    themeHex: 'themeHex',
    themeBgHex: 'themeBgHex',
    themeBgHex2: 'themeBgHex2',
    publicTitle: 'publicTitle',
    publicSubtitle: 'publicSubtitle',
    publicFooter: 'publicFooter',
    ctaLabel: 'ctaLabel',
    showLogo: 'showLogo',
    instagramUrl: 'instagramUrl',
    tiktokUrl: 'tiktokUrl',
    youtubeUrl: 'youtubeUrl',
    qrInstagram: 'qrInstagram',
    qrTiktok: 'qrTiktok',
    qrYoutube: 'qrYoutube'
  };

  export type BusinessScalarFieldEnum = (typeof BusinessScalarFieldEnum)[keyof typeof BusinessScalarFieldEnum]


  export const RedirectHistoryScalarFieldEnum: {
    id: 'id',
    businessId: 'businessId',
    platform: 'platform',
    fromUrl: 'fromUrl',
    toUrl: 'toUrl',
    changedAt: 'changedAt'
  };

  export type RedirectHistoryScalarFieldEnum = (typeof RedirectHistoryScalarFieldEnum)[keyof typeof RedirectHistoryScalarFieldEnum]


  export const ScanEventScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    businessId: 'businessId',
    platform: 'platform',
    userAgent: 'userAgent',
    ipHash: 'ipHash',
    referer: 'referer'
  };

  export type ScanEventScalarFieldEnum = (typeof ScanEventScalarFieldEnum)[keyof typeof ScanEventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    
  /**
   * Deep Input Types
   */


  export type BusinessWhereInput = {
    AND?: BusinessWhereInput | BusinessWhereInput[]
    OR?: BusinessWhereInput[]
    NOT?: BusinessWhereInput | BusinessWhereInput[]
    id?: StringFilter<"Business"> | string
    createdAt?: DateTimeFilter<"Business"> | Date | string
    updatedAt?: DateTimeFilter<"Business"> | Date | string
    name?: StringFilter<"Business"> | string
    slug?: StringFilter<"Business"> | string
    logoUrl?: StringNullableFilter<"Business"> | string | null
    themeHex?: StringNullableFilter<"Business"> | string | null
    themeBgHex?: StringNullableFilter<"Business"> | string | null
    themeBgHex2?: StringNullableFilter<"Business"> | string | null
    publicTitle?: StringNullableFilter<"Business"> | string | null
    publicSubtitle?: StringNullableFilter<"Business"> | string | null
    publicFooter?: StringNullableFilter<"Business"> | string | null
    ctaLabel?: StringNullableFilter<"Business"> | string | null
    showLogo?: BoolFilter<"Business"> | boolean
    instagramUrl?: StringNullableFilter<"Business"> | string | null
    tiktokUrl?: StringNullableFilter<"Business"> | string | null
    youtubeUrl?: StringNullableFilter<"Business"> | string | null
    qrInstagram?: StringNullableFilter<"Business"> | string | null
    qrTiktok?: StringNullableFilter<"Business"> | string | null
    qrYoutube?: StringNullableFilter<"Business"> | string | null
    histories?: RedirectHistoryListRelationFilter
    scanEvents?: ScanEventListRelationFilter
  }

  export type BusinessOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    themeHex?: SortOrderInput | SortOrder
    themeBgHex?: SortOrderInput | SortOrder
    themeBgHex2?: SortOrderInput | SortOrder
    publicTitle?: SortOrderInput | SortOrder
    publicSubtitle?: SortOrderInput | SortOrder
    publicFooter?: SortOrderInput | SortOrder
    ctaLabel?: SortOrderInput | SortOrder
    showLogo?: SortOrder
    instagramUrl?: SortOrderInput | SortOrder
    tiktokUrl?: SortOrderInput | SortOrder
    youtubeUrl?: SortOrderInput | SortOrder
    qrInstagram?: SortOrderInput | SortOrder
    qrTiktok?: SortOrderInput | SortOrder
    qrYoutube?: SortOrderInput | SortOrder
    histories?: RedirectHistoryOrderByRelationAggregateInput
    scanEvents?: ScanEventOrderByRelationAggregateInput
  }

  export type BusinessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    slug?: string
    AND?: BusinessWhereInput | BusinessWhereInput[]
    OR?: BusinessWhereInput[]
    NOT?: BusinessWhereInput | BusinessWhereInput[]
    createdAt?: DateTimeFilter<"Business"> | Date | string
    updatedAt?: DateTimeFilter<"Business"> | Date | string
    name?: StringFilter<"Business"> | string
    logoUrl?: StringNullableFilter<"Business"> | string | null
    themeHex?: StringNullableFilter<"Business"> | string | null
    themeBgHex?: StringNullableFilter<"Business"> | string | null
    themeBgHex2?: StringNullableFilter<"Business"> | string | null
    publicTitle?: StringNullableFilter<"Business"> | string | null
    publicSubtitle?: StringNullableFilter<"Business"> | string | null
    publicFooter?: StringNullableFilter<"Business"> | string | null
    ctaLabel?: StringNullableFilter<"Business"> | string | null
    showLogo?: BoolFilter<"Business"> | boolean
    instagramUrl?: StringNullableFilter<"Business"> | string | null
    tiktokUrl?: StringNullableFilter<"Business"> | string | null
    youtubeUrl?: StringNullableFilter<"Business"> | string | null
    qrInstagram?: StringNullableFilter<"Business"> | string | null
    qrTiktok?: StringNullableFilter<"Business"> | string | null
    qrYoutube?: StringNullableFilter<"Business"> | string | null
    histories?: RedirectHistoryListRelationFilter
    scanEvents?: ScanEventListRelationFilter
  }, "id" | "slug">

  export type BusinessOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logoUrl?: SortOrderInput | SortOrder
    themeHex?: SortOrderInput | SortOrder
    themeBgHex?: SortOrderInput | SortOrder
    themeBgHex2?: SortOrderInput | SortOrder
    publicTitle?: SortOrderInput | SortOrder
    publicSubtitle?: SortOrderInput | SortOrder
    publicFooter?: SortOrderInput | SortOrder
    ctaLabel?: SortOrderInput | SortOrder
    showLogo?: SortOrder
    instagramUrl?: SortOrderInput | SortOrder
    tiktokUrl?: SortOrderInput | SortOrder
    youtubeUrl?: SortOrderInput | SortOrder
    qrInstagram?: SortOrderInput | SortOrder
    qrTiktok?: SortOrderInput | SortOrder
    qrYoutube?: SortOrderInput | SortOrder
    _count?: BusinessCountOrderByAggregateInput
    _max?: BusinessMaxOrderByAggregateInput
    _min?: BusinessMinOrderByAggregateInput
  }

  export type BusinessScalarWhereWithAggregatesInput = {
    AND?: BusinessScalarWhereWithAggregatesInput | BusinessScalarWhereWithAggregatesInput[]
    OR?: BusinessScalarWhereWithAggregatesInput[]
    NOT?: BusinessScalarWhereWithAggregatesInput | BusinessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Business"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Business"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Business"> | Date | string
    name?: StringWithAggregatesFilter<"Business"> | string
    slug?: StringWithAggregatesFilter<"Business"> | string
    logoUrl?: StringNullableWithAggregatesFilter<"Business"> | string | null
    themeHex?: StringNullableWithAggregatesFilter<"Business"> | string | null
    themeBgHex?: StringNullableWithAggregatesFilter<"Business"> | string | null
    themeBgHex2?: StringNullableWithAggregatesFilter<"Business"> | string | null
    publicTitle?: StringNullableWithAggregatesFilter<"Business"> | string | null
    publicSubtitle?: StringNullableWithAggregatesFilter<"Business"> | string | null
    publicFooter?: StringNullableWithAggregatesFilter<"Business"> | string | null
    ctaLabel?: StringNullableWithAggregatesFilter<"Business"> | string | null
    showLogo?: BoolWithAggregatesFilter<"Business"> | boolean
    instagramUrl?: StringNullableWithAggregatesFilter<"Business"> | string | null
    tiktokUrl?: StringNullableWithAggregatesFilter<"Business"> | string | null
    youtubeUrl?: StringNullableWithAggregatesFilter<"Business"> | string | null
    qrInstagram?: StringNullableWithAggregatesFilter<"Business"> | string | null
    qrTiktok?: StringNullableWithAggregatesFilter<"Business"> | string | null
    qrYoutube?: StringNullableWithAggregatesFilter<"Business"> | string | null
  }

  export type RedirectHistoryWhereInput = {
    AND?: RedirectHistoryWhereInput | RedirectHistoryWhereInput[]
    OR?: RedirectHistoryWhereInput[]
    NOT?: RedirectHistoryWhereInput | RedirectHistoryWhereInput[]
    id?: StringFilter<"RedirectHistory"> | string
    businessId?: StringFilter<"RedirectHistory"> | string
    platform?: StringFilter<"RedirectHistory"> | string
    fromUrl?: StringNullableFilter<"RedirectHistory"> | string | null
    toUrl?: StringFilter<"RedirectHistory"> | string
    changedAt?: DateTimeFilter<"RedirectHistory"> | Date | string
    business?: XOR<BusinessRelationFilter, BusinessWhereInput>
  }

  export type RedirectHistoryOrderByWithRelationInput = {
    id?: SortOrder
    businessId?: SortOrder
    platform?: SortOrder
    fromUrl?: SortOrderInput | SortOrder
    toUrl?: SortOrder
    changedAt?: SortOrder
    business?: BusinessOrderByWithRelationInput
  }

  export type RedirectHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: RedirectHistoryWhereInput | RedirectHistoryWhereInput[]
    OR?: RedirectHistoryWhereInput[]
    NOT?: RedirectHistoryWhereInput | RedirectHistoryWhereInput[]
    businessId?: StringFilter<"RedirectHistory"> | string
    platform?: StringFilter<"RedirectHistory"> | string
    fromUrl?: StringNullableFilter<"RedirectHistory"> | string | null
    toUrl?: StringFilter<"RedirectHistory"> | string
    changedAt?: DateTimeFilter<"RedirectHistory"> | Date | string
    business?: XOR<BusinessRelationFilter, BusinessWhereInput>
  }, "id">

  export type RedirectHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    businessId?: SortOrder
    platform?: SortOrder
    fromUrl?: SortOrderInput | SortOrder
    toUrl?: SortOrder
    changedAt?: SortOrder
    _count?: RedirectHistoryCountOrderByAggregateInput
    _max?: RedirectHistoryMaxOrderByAggregateInput
    _min?: RedirectHistoryMinOrderByAggregateInput
  }

  export type RedirectHistoryScalarWhereWithAggregatesInput = {
    AND?: RedirectHistoryScalarWhereWithAggregatesInput | RedirectHistoryScalarWhereWithAggregatesInput[]
    OR?: RedirectHistoryScalarWhereWithAggregatesInput[]
    NOT?: RedirectHistoryScalarWhereWithAggregatesInput | RedirectHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RedirectHistory"> | string
    businessId?: StringWithAggregatesFilter<"RedirectHistory"> | string
    platform?: StringWithAggregatesFilter<"RedirectHistory"> | string
    fromUrl?: StringNullableWithAggregatesFilter<"RedirectHistory"> | string | null
    toUrl?: StringWithAggregatesFilter<"RedirectHistory"> | string
    changedAt?: DateTimeWithAggregatesFilter<"RedirectHistory"> | Date | string
  }

  export type ScanEventWhereInput = {
    AND?: ScanEventWhereInput | ScanEventWhereInput[]
    OR?: ScanEventWhereInput[]
    NOT?: ScanEventWhereInput | ScanEventWhereInput[]
    id?: StringFilter<"ScanEvent"> | string
    createdAt?: DateTimeFilter<"ScanEvent"> | Date | string
    businessId?: StringFilter<"ScanEvent"> | string
    platform?: StringFilter<"ScanEvent"> | string
    userAgent?: StringNullableFilter<"ScanEvent"> | string | null
    ipHash?: StringNullableFilter<"ScanEvent"> | string | null
    referer?: StringNullableFilter<"ScanEvent"> | string | null
    business?: XOR<BusinessRelationFilter, BusinessWhereInput>
  }

  export type ScanEventOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    businessId?: SortOrder
    platform?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipHash?: SortOrderInput | SortOrder
    referer?: SortOrderInput | SortOrder
    business?: BusinessOrderByWithRelationInput
  }

  export type ScanEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScanEventWhereInput | ScanEventWhereInput[]
    OR?: ScanEventWhereInput[]
    NOT?: ScanEventWhereInput | ScanEventWhereInput[]
    createdAt?: DateTimeFilter<"ScanEvent"> | Date | string
    businessId?: StringFilter<"ScanEvent"> | string
    platform?: StringFilter<"ScanEvent"> | string
    userAgent?: StringNullableFilter<"ScanEvent"> | string | null
    ipHash?: StringNullableFilter<"ScanEvent"> | string | null
    referer?: StringNullableFilter<"ScanEvent"> | string | null
    business?: XOR<BusinessRelationFilter, BusinessWhereInput>
  }, "id">

  export type ScanEventOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    businessId?: SortOrder
    platform?: SortOrder
    userAgent?: SortOrderInput | SortOrder
    ipHash?: SortOrderInput | SortOrder
    referer?: SortOrderInput | SortOrder
    _count?: ScanEventCountOrderByAggregateInput
    _max?: ScanEventMaxOrderByAggregateInput
    _min?: ScanEventMinOrderByAggregateInput
  }

  export type ScanEventScalarWhereWithAggregatesInput = {
    AND?: ScanEventScalarWhereWithAggregatesInput | ScanEventScalarWhereWithAggregatesInput[]
    OR?: ScanEventScalarWhereWithAggregatesInput[]
    NOT?: ScanEventScalarWhereWithAggregatesInput | ScanEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScanEvent"> | string
    createdAt?: DateTimeWithAggregatesFilter<"ScanEvent"> | Date | string
    businessId?: StringWithAggregatesFilter<"ScanEvent"> | string
    platform?: StringWithAggregatesFilter<"ScanEvent"> | string
    userAgent?: StringNullableWithAggregatesFilter<"ScanEvent"> | string | null
    ipHash?: StringNullableWithAggregatesFilter<"ScanEvent"> | string | null
    referer?: StringNullableWithAggregatesFilter<"ScanEvent"> | string | null
  }

  export type BusinessCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    slug: string
    logoUrl?: string | null
    themeHex?: string | null
    themeBgHex?: string | null
    themeBgHex2?: string | null
    publicTitle?: string | null
    publicSubtitle?: string | null
    publicFooter?: string | null
    ctaLabel?: string | null
    showLogo?: boolean
    instagramUrl?: string | null
    tiktokUrl?: string | null
    youtubeUrl?: string | null
    qrInstagram?: string | null
    qrTiktok?: string | null
    qrYoutube?: string | null
    histories?: RedirectHistoryCreateNestedManyWithoutBusinessInput
    scanEvents?: ScanEventCreateNestedManyWithoutBusinessInput
  }

  export type BusinessUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    slug: string
    logoUrl?: string | null
    themeHex?: string | null
    themeBgHex?: string | null
    themeBgHex2?: string | null
    publicTitle?: string | null
    publicSubtitle?: string | null
    publicFooter?: string | null
    ctaLabel?: string | null
    showLogo?: boolean
    instagramUrl?: string | null
    tiktokUrl?: string | null
    youtubeUrl?: string | null
    qrInstagram?: string | null
    qrTiktok?: string | null
    qrYoutube?: string | null
    histories?: RedirectHistoryUncheckedCreateNestedManyWithoutBusinessInput
    scanEvents?: ScanEventUncheckedCreateNestedManyWithoutBusinessInput
  }

  export type BusinessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex2?: NullableStringFieldUpdateOperationsInput | string | null
    publicTitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicSubtitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicFooter?: NullableStringFieldUpdateOperationsInput | string | null
    ctaLabel?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: BoolFieldUpdateOperationsInput | boolean
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tiktokUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrInstagram?: NullableStringFieldUpdateOperationsInput | string | null
    qrTiktok?: NullableStringFieldUpdateOperationsInput | string | null
    qrYoutube?: NullableStringFieldUpdateOperationsInput | string | null
    histories?: RedirectHistoryUpdateManyWithoutBusinessNestedInput
    scanEvents?: ScanEventUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex2?: NullableStringFieldUpdateOperationsInput | string | null
    publicTitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicSubtitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicFooter?: NullableStringFieldUpdateOperationsInput | string | null
    ctaLabel?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: BoolFieldUpdateOperationsInput | boolean
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tiktokUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrInstagram?: NullableStringFieldUpdateOperationsInput | string | null
    qrTiktok?: NullableStringFieldUpdateOperationsInput | string | null
    qrYoutube?: NullableStringFieldUpdateOperationsInput | string | null
    histories?: RedirectHistoryUncheckedUpdateManyWithoutBusinessNestedInput
    scanEvents?: ScanEventUncheckedUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    slug: string
    logoUrl?: string | null
    themeHex?: string | null
    themeBgHex?: string | null
    themeBgHex2?: string | null
    publicTitle?: string | null
    publicSubtitle?: string | null
    publicFooter?: string | null
    ctaLabel?: string | null
    showLogo?: boolean
    instagramUrl?: string | null
    tiktokUrl?: string | null
    youtubeUrl?: string | null
    qrInstagram?: string | null
    qrTiktok?: string | null
    qrYoutube?: string | null
  }

  export type BusinessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex2?: NullableStringFieldUpdateOperationsInput | string | null
    publicTitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicSubtitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicFooter?: NullableStringFieldUpdateOperationsInput | string | null
    ctaLabel?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: BoolFieldUpdateOperationsInput | boolean
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tiktokUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrInstagram?: NullableStringFieldUpdateOperationsInput | string | null
    qrTiktok?: NullableStringFieldUpdateOperationsInput | string | null
    qrYoutube?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BusinessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex2?: NullableStringFieldUpdateOperationsInput | string | null
    publicTitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicSubtitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicFooter?: NullableStringFieldUpdateOperationsInput | string | null
    ctaLabel?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: BoolFieldUpdateOperationsInput | boolean
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tiktokUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrInstagram?: NullableStringFieldUpdateOperationsInput | string | null
    qrTiktok?: NullableStringFieldUpdateOperationsInput | string | null
    qrYoutube?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type RedirectHistoryCreateInput = {
    id?: string
    platform: string
    fromUrl?: string | null
    toUrl: string
    changedAt?: Date | string
    business: BusinessCreateNestedOneWithoutHistoriesInput
  }

  export type RedirectHistoryUncheckedCreateInput = {
    id?: string
    businessId: string
    platform: string
    fromUrl?: string | null
    toUrl: string
    changedAt?: Date | string
  }

  export type RedirectHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    fromUrl?: NullableStringFieldUpdateOperationsInput | string | null
    toUrl?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    business?: BusinessUpdateOneRequiredWithoutHistoriesNestedInput
  }

  export type RedirectHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    fromUrl?: NullableStringFieldUpdateOperationsInput | string | null
    toUrl?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedirectHistoryCreateManyInput = {
    id?: string
    businessId: string
    platform: string
    fromUrl?: string | null
    toUrl: string
    changedAt?: Date | string
  }

  export type RedirectHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    fromUrl?: NullableStringFieldUpdateOperationsInput | string | null
    toUrl?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedirectHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    businessId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    fromUrl?: NullableStringFieldUpdateOperationsInput | string | null
    toUrl?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScanEventCreateInput = {
    id?: string
    createdAt?: Date | string
    platform: string
    userAgent?: string | null
    ipHash?: string | null
    referer?: string | null
    business: BusinessCreateNestedOneWithoutScanEventsInput
  }

  export type ScanEventUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    businessId: string
    platform: string
    userAgent?: string | null
    ipHash?: string | null
    referer?: string | null
  }

  export type ScanEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipHash?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
    business?: BusinessUpdateOneRequiredWithoutScanEventsNestedInput
  }

  export type ScanEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipHash?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScanEventCreateManyInput = {
    id?: string
    createdAt?: Date | string
    businessId: string
    platform: string
    userAgent?: string | null
    ipHash?: string | null
    referer?: string | null
  }

  export type ScanEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipHash?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScanEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    businessId?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipHash?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type RedirectHistoryListRelationFilter = {
    every?: RedirectHistoryWhereInput
    some?: RedirectHistoryWhereInput
    none?: RedirectHistoryWhereInput
  }

  export type ScanEventListRelationFilter = {
    every?: ScanEventWhereInput
    some?: ScanEventWhereInput
    none?: ScanEventWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type RedirectHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScanEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BusinessCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logoUrl?: SortOrder
    themeHex?: SortOrder
    themeBgHex?: SortOrder
    themeBgHex2?: SortOrder
    publicTitle?: SortOrder
    publicSubtitle?: SortOrder
    publicFooter?: SortOrder
    ctaLabel?: SortOrder
    showLogo?: SortOrder
    instagramUrl?: SortOrder
    tiktokUrl?: SortOrder
    youtubeUrl?: SortOrder
    qrInstagram?: SortOrder
    qrTiktok?: SortOrder
    qrYoutube?: SortOrder
  }

  export type BusinessMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logoUrl?: SortOrder
    themeHex?: SortOrder
    themeBgHex?: SortOrder
    themeBgHex2?: SortOrder
    publicTitle?: SortOrder
    publicSubtitle?: SortOrder
    publicFooter?: SortOrder
    ctaLabel?: SortOrder
    showLogo?: SortOrder
    instagramUrl?: SortOrder
    tiktokUrl?: SortOrder
    youtubeUrl?: SortOrder
    qrInstagram?: SortOrder
    qrTiktok?: SortOrder
    qrYoutube?: SortOrder
  }

  export type BusinessMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    logoUrl?: SortOrder
    themeHex?: SortOrder
    themeBgHex?: SortOrder
    themeBgHex2?: SortOrder
    publicTitle?: SortOrder
    publicSubtitle?: SortOrder
    publicFooter?: SortOrder
    ctaLabel?: SortOrder
    showLogo?: SortOrder
    instagramUrl?: SortOrder
    tiktokUrl?: SortOrder
    youtubeUrl?: SortOrder
    qrInstagram?: SortOrder
    qrTiktok?: SortOrder
    qrYoutube?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type BusinessRelationFilter = {
    is?: BusinessWhereInput
    isNot?: BusinessWhereInput
  }

  export type RedirectHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    businessId?: SortOrder
    platform?: SortOrder
    fromUrl?: SortOrder
    toUrl?: SortOrder
    changedAt?: SortOrder
  }

  export type RedirectHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    businessId?: SortOrder
    platform?: SortOrder
    fromUrl?: SortOrder
    toUrl?: SortOrder
    changedAt?: SortOrder
  }

  export type RedirectHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    businessId?: SortOrder
    platform?: SortOrder
    fromUrl?: SortOrder
    toUrl?: SortOrder
    changedAt?: SortOrder
  }

  export type ScanEventCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    businessId?: SortOrder
    platform?: SortOrder
    userAgent?: SortOrder
    ipHash?: SortOrder
    referer?: SortOrder
  }

  export type ScanEventMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    businessId?: SortOrder
    platform?: SortOrder
    userAgent?: SortOrder
    ipHash?: SortOrder
    referer?: SortOrder
  }

  export type ScanEventMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    businessId?: SortOrder
    platform?: SortOrder
    userAgent?: SortOrder
    ipHash?: SortOrder
    referer?: SortOrder
  }

  export type RedirectHistoryCreateNestedManyWithoutBusinessInput = {
    create?: XOR<RedirectHistoryCreateWithoutBusinessInput, RedirectHistoryUncheckedCreateWithoutBusinessInput> | RedirectHistoryCreateWithoutBusinessInput[] | RedirectHistoryUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: RedirectHistoryCreateOrConnectWithoutBusinessInput | RedirectHistoryCreateOrConnectWithoutBusinessInput[]
    createMany?: RedirectHistoryCreateManyBusinessInputEnvelope
    connect?: RedirectHistoryWhereUniqueInput | RedirectHistoryWhereUniqueInput[]
  }

  export type ScanEventCreateNestedManyWithoutBusinessInput = {
    create?: XOR<ScanEventCreateWithoutBusinessInput, ScanEventUncheckedCreateWithoutBusinessInput> | ScanEventCreateWithoutBusinessInput[] | ScanEventUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: ScanEventCreateOrConnectWithoutBusinessInput | ScanEventCreateOrConnectWithoutBusinessInput[]
    createMany?: ScanEventCreateManyBusinessInputEnvelope
    connect?: ScanEventWhereUniqueInput | ScanEventWhereUniqueInput[]
  }

  export type RedirectHistoryUncheckedCreateNestedManyWithoutBusinessInput = {
    create?: XOR<RedirectHistoryCreateWithoutBusinessInput, RedirectHistoryUncheckedCreateWithoutBusinessInput> | RedirectHistoryCreateWithoutBusinessInput[] | RedirectHistoryUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: RedirectHistoryCreateOrConnectWithoutBusinessInput | RedirectHistoryCreateOrConnectWithoutBusinessInput[]
    createMany?: RedirectHistoryCreateManyBusinessInputEnvelope
    connect?: RedirectHistoryWhereUniqueInput | RedirectHistoryWhereUniqueInput[]
  }

  export type ScanEventUncheckedCreateNestedManyWithoutBusinessInput = {
    create?: XOR<ScanEventCreateWithoutBusinessInput, ScanEventUncheckedCreateWithoutBusinessInput> | ScanEventCreateWithoutBusinessInput[] | ScanEventUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: ScanEventCreateOrConnectWithoutBusinessInput | ScanEventCreateOrConnectWithoutBusinessInput[]
    createMany?: ScanEventCreateManyBusinessInputEnvelope
    connect?: ScanEventWhereUniqueInput | ScanEventWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type RedirectHistoryUpdateManyWithoutBusinessNestedInput = {
    create?: XOR<RedirectHistoryCreateWithoutBusinessInput, RedirectHistoryUncheckedCreateWithoutBusinessInput> | RedirectHistoryCreateWithoutBusinessInput[] | RedirectHistoryUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: RedirectHistoryCreateOrConnectWithoutBusinessInput | RedirectHistoryCreateOrConnectWithoutBusinessInput[]
    upsert?: RedirectHistoryUpsertWithWhereUniqueWithoutBusinessInput | RedirectHistoryUpsertWithWhereUniqueWithoutBusinessInput[]
    createMany?: RedirectHistoryCreateManyBusinessInputEnvelope
    set?: RedirectHistoryWhereUniqueInput | RedirectHistoryWhereUniqueInput[]
    disconnect?: RedirectHistoryWhereUniqueInput | RedirectHistoryWhereUniqueInput[]
    delete?: RedirectHistoryWhereUniqueInput | RedirectHistoryWhereUniqueInput[]
    connect?: RedirectHistoryWhereUniqueInput | RedirectHistoryWhereUniqueInput[]
    update?: RedirectHistoryUpdateWithWhereUniqueWithoutBusinessInput | RedirectHistoryUpdateWithWhereUniqueWithoutBusinessInput[]
    updateMany?: RedirectHistoryUpdateManyWithWhereWithoutBusinessInput | RedirectHistoryUpdateManyWithWhereWithoutBusinessInput[]
    deleteMany?: RedirectHistoryScalarWhereInput | RedirectHistoryScalarWhereInput[]
  }

  export type ScanEventUpdateManyWithoutBusinessNestedInput = {
    create?: XOR<ScanEventCreateWithoutBusinessInput, ScanEventUncheckedCreateWithoutBusinessInput> | ScanEventCreateWithoutBusinessInput[] | ScanEventUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: ScanEventCreateOrConnectWithoutBusinessInput | ScanEventCreateOrConnectWithoutBusinessInput[]
    upsert?: ScanEventUpsertWithWhereUniqueWithoutBusinessInput | ScanEventUpsertWithWhereUniqueWithoutBusinessInput[]
    createMany?: ScanEventCreateManyBusinessInputEnvelope
    set?: ScanEventWhereUniqueInput | ScanEventWhereUniqueInput[]
    disconnect?: ScanEventWhereUniqueInput | ScanEventWhereUniqueInput[]
    delete?: ScanEventWhereUniqueInput | ScanEventWhereUniqueInput[]
    connect?: ScanEventWhereUniqueInput | ScanEventWhereUniqueInput[]
    update?: ScanEventUpdateWithWhereUniqueWithoutBusinessInput | ScanEventUpdateWithWhereUniqueWithoutBusinessInput[]
    updateMany?: ScanEventUpdateManyWithWhereWithoutBusinessInput | ScanEventUpdateManyWithWhereWithoutBusinessInput[]
    deleteMany?: ScanEventScalarWhereInput | ScanEventScalarWhereInput[]
  }

  export type RedirectHistoryUncheckedUpdateManyWithoutBusinessNestedInput = {
    create?: XOR<RedirectHistoryCreateWithoutBusinessInput, RedirectHistoryUncheckedCreateWithoutBusinessInput> | RedirectHistoryCreateWithoutBusinessInput[] | RedirectHistoryUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: RedirectHistoryCreateOrConnectWithoutBusinessInput | RedirectHistoryCreateOrConnectWithoutBusinessInput[]
    upsert?: RedirectHistoryUpsertWithWhereUniqueWithoutBusinessInput | RedirectHistoryUpsertWithWhereUniqueWithoutBusinessInput[]
    createMany?: RedirectHistoryCreateManyBusinessInputEnvelope
    set?: RedirectHistoryWhereUniqueInput | RedirectHistoryWhereUniqueInput[]
    disconnect?: RedirectHistoryWhereUniqueInput | RedirectHistoryWhereUniqueInput[]
    delete?: RedirectHistoryWhereUniqueInput | RedirectHistoryWhereUniqueInput[]
    connect?: RedirectHistoryWhereUniqueInput | RedirectHistoryWhereUniqueInput[]
    update?: RedirectHistoryUpdateWithWhereUniqueWithoutBusinessInput | RedirectHistoryUpdateWithWhereUniqueWithoutBusinessInput[]
    updateMany?: RedirectHistoryUpdateManyWithWhereWithoutBusinessInput | RedirectHistoryUpdateManyWithWhereWithoutBusinessInput[]
    deleteMany?: RedirectHistoryScalarWhereInput | RedirectHistoryScalarWhereInput[]
  }

  export type ScanEventUncheckedUpdateManyWithoutBusinessNestedInput = {
    create?: XOR<ScanEventCreateWithoutBusinessInput, ScanEventUncheckedCreateWithoutBusinessInput> | ScanEventCreateWithoutBusinessInput[] | ScanEventUncheckedCreateWithoutBusinessInput[]
    connectOrCreate?: ScanEventCreateOrConnectWithoutBusinessInput | ScanEventCreateOrConnectWithoutBusinessInput[]
    upsert?: ScanEventUpsertWithWhereUniqueWithoutBusinessInput | ScanEventUpsertWithWhereUniqueWithoutBusinessInput[]
    createMany?: ScanEventCreateManyBusinessInputEnvelope
    set?: ScanEventWhereUniqueInput | ScanEventWhereUniqueInput[]
    disconnect?: ScanEventWhereUniqueInput | ScanEventWhereUniqueInput[]
    delete?: ScanEventWhereUniqueInput | ScanEventWhereUniqueInput[]
    connect?: ScanEventWhereUniqueInput | ScanEventWhereUniqueInput[]
    update?: ScanEventUpdateWithWhereUniqueWithoutBusinessInput | ScanEventUpdateWithWhereUniqueWithoutBusinessInput[]
    updateMany?: ScanEventUpdateManyWithWhereWithoutBusinessInput | ScanEventUpdateManyWithWhereWithoutBusinessInput[]
    deleteMany?: ScanEventScalarWhereInput | ScanEventScalarWhereInput[]
  }

  export type BusinessCreateNestedOneWithoutHistoriesInput = {
    create?: XOR<BusinessCreateWithoutHistoriesInput, BusinessUncheckedCreateWithoutHistoriesInput>
    connectOrCreate?: BusinessCreateOrConnectWithoutHistoriesInput
    connect?: BusinessWhereUniqueInput
  }

  export type BusinessUpdateOneRequiredWithoutHistoriesNestedInput = {
    create?: XOR<BusinessCreateWithoutHistoriesInput, BusinessUncheckedCreateWithoutHistoriesInput>
    connectOrCreate?: BusinessCreateOrConnectWithoutHistoriesInput
    upsert?: BusinessUpsertWithoutHistoriesInput
    connect?: BusinessWhereUniqueInput
    update?: XOR<XOR<BusinessUpdateToOneWithWhereWithoutHistoriesInput, BusinessUpdateWithoutHistoriesInput>, BusinessUncheckedUpdateWithoutHistoriesInput>
  }

  export type BusinessCreateNestedOneWithoutScanEventsInput = {
    create?: XOR<BusinessCreateWithoutScanEventsInput, BusinessUncheckedCreateWithoutScanEventsInput>
    connectOrCreate?: BusinessCreateOrConnectWithoutScanEventsInput
    connect?: BusinessWhereUniqueInput
  }

  export type BusinessUpdateOneRequiredWithoutScanEventsNestedInput = {
    create?: XOR<BusinessCreateWithoutScanEventsInput, BusinessUncheckedCreateWithoutScanEventsInput>
    connectOrCreate?: BusinessCreateOrConnectWithoutScanEventsInput
    upsert?: BusinessUpsertWithoutScanEventsInput
    connect?: BusinessWhereUniqueInput
    update?: XOR<XOR<BusinessUpdateToOneWithWhereWithoutScanEventsInput, BusinessUpdateWithoutScanEventsInput>, BusinessUncheckedUpdateWithoutScanEventsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type RedirectHistoryCreateWithoutBusinessInput = {
    id?: string
    platform: string
    fromUrl?: string | null
    toUrl: string
    changedAt?: Date | string
  }

  export type RedirectHistoryUncheckedCreateWithoutBusinessInput = {
    id?: string
    platform: string
    fromUrl?: string | null
    toUrl: string
    changedAt?: Date | string
  }

  export type RedirectHistoryCreateOrConnectWithoutBusinessInput = {
    where: RedirectHistoryWhereUniqueInput
    create: XOR<RedirectHistoryCreateWithoutBusinessInput, RedirectHistoryUncheckedCreateWithoutBusinessInput>
  }

  export type RedirectHistoryCreateManyBusinessInputEnvelope = {
    data: RedirectHistoryCreateManyBusinessInput | RedirectHistoryCreateManyBusinessInput[]
  }

  export type ScanEventCreateWithoutBusinessInput = {
    id?: string
    createdAt?: Date | string
    platform: string
    userAgent?: string | null
    ipHash?: string | null
    referer?: string | null
  }

  export type ScanEventUncheckedCreateWithoutBusinessInput = {
    id?: string
    createdAt?: Date | string
    platform: string
    userAgent?: string | null
    ipHash?: string | null
    referer?: string | null
  }

  export type ScanEventCreateOrConnectWithoutBusinessInput = {
    where: ScanEventWhereUniqueInput
    create: XOR<ScanEventCreateWithoutBusinessInput, ScanEventUncheckedCreateWithoutBusinessInput>
  }

  export type ScanEventCreateManyBusinessInputEnvelope = {
    data: ScanEventCreateManyBusinessInput | ScanEventCreateManyBusinessInput[]
  }

  export type RedirectHistoryUpsertWithWhereUniqueWithoutBusinessInput = {
    where: RedirectHistoryWhereUniqueInput
    update: XOR<RedirectHistoryUpdateWithoutBusinessInput, RedirectHistoryUncheckedUpdateWithoutBusinessInput>
    create: XOR<RedirectHistoryCreateWithoutBusinessInput, RedirectHistoryUncheckedCreateWithoutBusinessInput>
  }

  export type RedirectHistoryUpdateWithWhereUniqueWithoutBusinessInput = {
    where: RedirectHistoryWhereUniqueInput
    data: XOR<RedirectHistoryUpdateWithoutBusinessInput, RedirectHistoryUncheckedUpdateWithoutBusinessInput>
  }

  export type RedirectHistoryUpdateManyWithWhereWithoutBusinessInput = {
    where: RedirectHistoryScalarWhereInput
    data: XOR<RedirectHistoryUpdateManyMutationInput, RedirectHistoryUncheckedUpdateManyWithoutBusinessInput>
  }

  export type RedirectHistoryScalarWhereInput = {
    AND?: RedirectHistoryScalarWhereInput | RedirectHistoryScalarWhereInput[]
    OR?: RedirectHistoryScalarWhereInput[]
    NOT?: RedirectHistoryScalarWhereInput | RedirectHistoryScalarWhereInput[]
    id?: StringFilter<"RedirectHistory"> | string
    businessId?: StringFilter<"RedirectHistory"> | string
    platform?: StringFilter<"RedirectHistory"> | string
    fromUrl?: StringNullableFilter<"RedirectHistory"> | string | null
    toUrl?: StringFilter<"RedirectHistory"> | string
    changedAt?: DateTimeFilter<"RedirectHistory"> | Date | string
  }

  export type ScanEventUpsertWithWhereUniqueWithoutBusinessInput = {
    where: ScanEventWhereUniqueInput
    update: XOR<ScanEventUpdateWithoutBusinessInput, ScanEventUncheckedUpdateWithoutBusinessInput>
    create: XOR<ScanEventCreateWithoutBusinessInput, ScanEventUncheckedCreateWithoutBusinessInput>
  }

  export type ScanEventUpdateWithWhereUniqueWithoutBusinessInput = {
    where: ScanEventWhereUniqueInput
    data: XOR<ScanEventUpdateWithoutBusinessInput, ScanEventUncheckedUpdateWithoutBusinessInput>
  }

  export type ScanEventUpdateManyWithWhereWithoutBusinessInput = {
    where: ScanEventScalarWhereInput
    data: XOR<ScanEventUpdateManyMutationInput, ScanEventUncheckedUpdateManyWithoutBusinessInput>
  }

  export type ScanEventScalarWhereInput = {
    AND?: ScanEventScalarWhereInput | ScanEventScalarWhereInput[]
    OR?: ScanEventScalarWhereInput[]
    NOT?: ScanEventScalarWhereInput | ScanEventScalarWhereInput[]
    id?: StringFilter<"ScanEvent"> | string
    createdAt?: DateTimeFilter<"ScanEvent"> | Date | string
    businessId?: StringFilter<"ScanEvent"> | string
    platform?: StringFilter<"ScanEvent"> | string
    userAgent?: StringNullableFilter<"ScanEvent"> | string | null
    ipHash?: StringNullableFilter<"ScanEvent"> | string | null
    referer?: StringNullableFilter<"ScanEvent"> | string | null
  }

  export type BusinessCreateWithoutHistoriesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    slug: string
    logoUrl?: string | null
    themeHex?: string | null
    themeBgHex?: string | null
    themeBgHex2?: string | null
    publicTitle?: string | null
    publicSubtitle?: string | null
    publicFooter?: string | null
    ctaLabel?: string | null
    showLogo?: boolean
    instagramUrl?: string | null
    tiktokUrl?: string | null
    youtubeUrl?: string | null
    qrInstagram?: string | null
    qrTiktok?: string | null
    qrYoutube?: string | null
    scanEvents?: ScanEventCreateNestedManyWithoutBusinessInput
  }

  export type BusinessUncheckedCreateWithoutHistoriesInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    slug: string
    logoUrl?: string | null
    themeHex?: string | null
    themeBgHex?: string | null
    themeBgHex2?: string | null
    publicTitle?: string | null
    publicSubtitle?: string | null
    publicFooter?: string | null
    ctaLabel?: string | null
    showLogo?: boolean
    instagramUrl?: string | null
    tiktokUrl?: string | null
    youtubeUrl?: string | null
    qrInstagram?: string | null
    qrTiktok?: string | null
    qrYoutube?: string | null
    scanEvents?: ScanEventUncheckedCreateNestedManyWithoutBusinessInput
  }

  export type BusinessCreateOrConnectWithoutHistoriesInput = {
    where: BusinessWhereUniqueInput
    create: XOR<BusinessCreateWithoutHistoriesInput, BusinessUncheckedCreateWithoutHistoriesInput>
  }

  export type BusinessUpsertWithoutHistoriesInput = {
    update: XOR<BusinessUpdateWithoutHistoriesInput, BusinessUncheckedUpdateWithoutHistoriesInput>
    create: XOR<BusinessCreateWithoutHistoriesInput, BusinessUncheckedCreateWithoutHistoriesInput>
    where?: BusinessWhereInput
  }

  export type BusinessUpdateToOneWithWhereWithoutHistoriesInput = {
    where?: BusinessWhereInput
    data: XOR<BusinessUpdateWithoutHistoriesInput, BusinessUncheckedUpdateWithoutHistoriesInput>
  }

  export type BusinessUpdateWithoutHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex2?: NullableStringFieldUpdateOperationsInput | string | null
    publicTitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicSubtitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicFooter?: NullableStringFieldUpdateOperationsInput | string | null
    ctaLabel?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: BoolFieldUpdateOperationsInput | boolean
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tiktokUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrInstagram?: NullableStringFieldUpdateOperationsInput | string | null
    qrTiktok?: NullableStringFieldUpdateOperationsInput | string | null
    qrYoutube?: NullableStringFieldUpdateOperationsInput | string | null
    scanEvents?: ScanEventUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessUncheckedUpdateWithoutHistoriesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex2?: NullableStringFieldUpdateOperationsInput | string | null
    publicTitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicSubtitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicFooter?: NullableStringFieldUpdateOperationsInput | string | null
    ctaLabel?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: BoolFieldUpdateOperationsInput | boolean
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tiktokUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrInstagram?: NullableStringFieldUpdateOperationsInput | string | null
    qrTiktok?: NullableStringFieldUpdateOperationsInput | string | null
    qrYoutube?: NullableStringFieldUpdateOperationsInput | string | null
    scanEvents?: ScanEventUncheckedUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessCreateWithoutScanEventsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    slug: string
    logoUrl?: string | null
    themeHex?: string | null
    themeBgHex?: string | null
    themeBgHex2?: string | null
    publicTitle?: string | null
    publicSubtitle?: string | null
    publicFooter?: string | null
    ctaLabel?: string | null
    showLogo?: boolean
    instagramUrl?: string | null
    tiktokUrl?: string | null
    youtubeUrl?: string | null
    qrInstagram?: string | null
    qrTiktok?: string | null
    qrYoutube?: string | null
    histories?: RedirectHistoryCreateNestedManyWithoutBusinessInput
  }

  export type BusinessUncheckedCreateWithoutScanEventsInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    name: string
    slug: string
    logoUrl?: string | null
    themeHex?: string | null
    themeBgHex?: string | null
    themeBgHex2?: string | null
    publicTitle?: string | null
    publicSubtitle?: string | null
    publicFooter?: string | null
    ctaLabel?: string | null
    showLogo?: boolean
    instagramUrl?: string | null
    tiktokUrl?: string | null
    youtubeUrl?: string | null
    qrInstagram?: string | null
    qrTiktok?: string | null
    qrYoutube?: string | null
    histories?: RedirectHistoryUncheckedCreateNestedManyWithoutBusinessInput
  }

  export type BusinessCreateOrConnectWithoutScanEventsInput = {
    where: BusinessWhereUniqueInput
    create: XOR<BusinessCreateWithoutScanEventsInput, BusinessUncheckedCreateWithoutScanEventsInput>
  }

  export type BusinessUpsertWithoutScanEventsInput = {
    update: XOR<BusinessUpdateWithoutScanEventsInput, BusinessUncheckedUpdateWithoutScanEventsInput>
    create: XOR<BusinessCreateWithoutScanEventsInput, BusinessUncheckedCreateWithoutScanEventsInput>
    where?: BusinessWhereInput
  }

  export type BusinessUpdateToOneWithWhereWithoutScanEventsInput = {
    where?: BusinessWhereInput
    data: XOR<BusinessUpdateWithoutScanEventsInput, BusinessUncheckedUpdateWithoutScanEventsInput>
  }

  export type BusinessUpdateWithoutScanEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex2?: NullableStringFieldUpdateOperationsInput | string | null
    publicTitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicSubtitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicFooter?: NullableStringFieldUpdateOperationsInput | string | null
    ctaLabel?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: BoolFieldUpdateOperationsInput | boolean
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tiktokUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrInstagram?: NullableStringFieldUpdateOperationsInput | string | null
    qrTiktok?: NullableStringFieldUpdateOperationsInput | string | null
    qrYoutube?: NullableStringFieldUpdateOperationsInput | string | null
    histories?: RedirectHistoryUpdateManyWithoutBusinessNestedInput
  }

  export type BusinessUncheckedUpdateWithoutScanEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    logoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    themeHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex?: NullableStringFieldUpdateOperationsInput | string | null
    themeBgHex2?: NullableStringFieldUpdateOperationsInput | string | null
    publicTitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicSubtitle?: NullableStringFieldUpdateOperationsInput | string | null
    publicFooter?: NullableStringFieldUpdateOperationsInput | string | null
    ctaLabel?: NullableStringFieldUpdateOperationsInput | string | null
    showLogo?: BoolFieldUpdateOperationsInput | boolean
    instagramUrl?: NullableStringFieldUpdateOperationsInput | string | null
    tiktokUrl?: NullableStringFieldUpdateOperationsInput | string | null
    youtubeUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrInstagram?: NullableStringFieldUpdateOperationsInput | string | null
    qrTiktok?: NullableStringFieldUpdateOperationsInput | string | null
    qrYoutube?: NullableStringFieldUpdateOperationsInput | string | null
    histories?: RedirectHistoryUncheckedUpdateManyWithoutBusinessNestedInput
  }

  export type RedirectHistoryCreateManyBusinessInput = {
    id?: string
    platform: string
    fromUrl?: string | null
    toUrl: string
    changedAt?: Date | string
  }

  export type ScanEventCreateManyBusinessInput = {
    id?: string
    createdAt?: Date | string
    platform: string
    userAgent?: string | null
    ipHash?: string | null
    referer?: string | null
  }

  export type RedirectHistoryUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    fromUrl?: NullableStringFieldUpdateOperationsInput | string | null
    toUrl?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedirectHistoryUncheckedUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    fromUrl?: NullableStringFieldUpdateOperationsInput | string | null
    toUrl?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RedirectHistoryUncheckedUpdateManyWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: StringFieldUpdateOperationsInput | string
    fromUrl?: NullableStringFieldUpdateOperationsInput | string | null
    toUrl?: StringFieldUpdateOperationsInput | string
    changedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScanEventUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipHash?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScanEventUncheckedUpdateWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipHash?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ScanEventUncheckedUpdateManyWithoutBusinessInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: StringFieldUpdateOperationsInput | string
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    ipHash?: NullableStringFieldUpdateOperationsInput | string | null
    referer?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use BusinessCountOutputTypeDefaultArgs instead
     */
    export type BusinessCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BusinessCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BusinessDefaultArgs instead
     */
    export type BusinessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BusinessDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RedirectHistoryDefaultArgs instead
     */
    export type RedirectHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RedirectHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ScanEventDefaultArgs instead
     */
    export type ScanEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ScanEventDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}